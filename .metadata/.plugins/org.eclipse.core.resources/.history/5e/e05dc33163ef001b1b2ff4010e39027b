package com.koreait.layoutTest;

import java.awt.Button;
import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

// GridLayout은 컨테이너를 격자(grid, 바둑판) 모양으로 나누고 컴포넌트를 나눠진 구역에 차례대로 배치하는 레이아웃 매니저이다.
public class GridLayoutTest extends Frame {	
	
//	버튼 배열이 선언만 된 상태로 실제 프로그램에서 사용할 버튼 객체는 아직 생성되지 않은 상태(null)이다.
//	버튼 배열을 선언한 후 각각의 버튼 배열 요소에 객체를 생성해서 넣치 않은 상태로 사용하면 NullPointerExeption이 발생된다.
	Button[] buttons = new Button[16];
	
	public GridLayoutTest() {	
		setTitle("GridLayout");
		setBounds(800, 100, 400, 300);
		
//		GridLayout 레이아웃을 만들어 적용시킨다.
//		new GridLayout(행 개수, 열 개수[, 세로여백, 가로여백])
//		GridLayout grid= new GridLayout(4, 4);
//		setLayout(grid);
//		위의 2문장을 아래와 같이 1문장으로 줄여서 사용할 수 있다.
		setLayout(new GridLayout(4, 4));
		
//		버튼 배열의 크기만큼 반복하며 GridLayout에 버튼을 넣어준다.
		for (int i = 0; i < buttons.length; i++) {
			add(buttons[i]);
		}
		
		addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				System.exit(0);		
			}
		});
		setVisible(true);
	}
	
	public static void main(String[] args) {
		GridLayoutTest window = new GridLayoutTest();
	}
	
}
		
		
	
	

