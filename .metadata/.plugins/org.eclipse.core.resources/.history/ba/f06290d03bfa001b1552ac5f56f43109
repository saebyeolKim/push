package com.koreait.memoProjectDB;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

//	DAO(Data Access Object): 데이터베이스에 접속해서 sql 명령을 실행하는 메소드만 모아놓은 클래스
//	실행할 sql 명령 1개당 1개의 메소드를 만든다.
public class MemoDAO {

	public static boolean insert(MemoVO vo) {

		boolean result = true;
//		데이터베이스 작업에 사용할 객체를 선언한다.
		Connection conn = null;
		PreparedStatement pstmt = null;
		try {
//			데이터베이스에 연결한다.
			conn = DBUtil.getMySqlConnection();
//			sql 명령을 만든다.
			String sql = "insert into memo(name, password, memo) values(?, ?, ?)";	
//			sql 명령을 임시로 실행한다.
			pstmt = conn.prepareStatement(sql);
//			"?"에 데이터를 넣어준다.
			pstmt.setString(1, vo.getName());		
			pstmt.setString(2, vo.getPassword());	
			pstmt.setString(3, vo.getMemo());		
//			sql 명령을 실행한다.
			pstmt.executeUpdate();
		} catch (SQLException e) {
			System.out.println("sql 명령이 올바로 실행되지 않았습니다.");
			result = false;
		} finally {
			DBUtil.close(conn);
			DBUtil.close(pstmt);
		}
		return result;
	}

//	테이블에 저장된 전체 글 목록을 idx의 내림차순으로 얻어오는 select sql 명령을 실행하고 결과를 ArrayList에 저장해서 리턴하는 메소드
	public static ArrayList<MemoVO> select() {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ArrayList<MemoVO> list = null;		// 결과를 저장해서 리턴시킬 ArrayList
		
		try {
			conn = DBUtil.getMySqlConnection();
			String sql = "select * from memo order by idx desc";
			pstmt = conn.prepareStatement(sql);
//			ResultSet 객체에 select sql 명령이 실행된 결과를 저장한다.
			rs = pstmt.executeQuery();
//			select sql 명령이 정상적으로 실행되었으므로 결과를 저장해서 리턴시킬 ArrayList 객체를 만든다.
			list = new ArrayList<MemoVO>();
			
//			ResultSet 객체에 다음 데이터가 없을 때까지 반복하며 글 목록을 ArrayList에 저장시킨다.
//			next() 메소드로 ResultSet 객체에 저장된 다음 데이터로 접근한다.
//			next() 메소드는 ResultSet 객체에 다음 데이터가 있으면 True, 없으면 False를 리턴한다.
			while (rs.next()) {		// ResultSet 객체에 다음데이터가 있는 동안 반복한다.
//				ArrayList가 MemoVO 클래스 타입의 객체를 기억하기 때문에 MemoVO 클래스 객체를 생성하고 ResultSet 객체에 저장된
//				데이터를 읽어서 ArrayList에 저장한다.
				MemoVO vo = new MemoVO();
				vo.setIdx(rs.getInt("idx"));
				vo.setName(rs.getString("name"));
				vo.setPassword(rs.getString("password"));;
				vo.setMemo(rs.getString("memo"));
				vo.setWriteDate(rs.getTimestamp("writeDate"));
//				System.out.println(vo);
				list.add(vo);
			}
			
		} catch (SQLException e) {
			System.out.println("sql 명령이 올바로 실행되지 않았습니다.");
			e.printStackTrace();
		} finally {
			DBUtil.close(conn);
			DBUtil.close(pstmt);
			DBUtil.close(rs);
		}
		return list;
	}

}
